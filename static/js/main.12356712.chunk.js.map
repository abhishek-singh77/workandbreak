{"version":3,"sources":["App.js","index.js"],"names":["SetTimer","arg","id","title","toLowerCase","className","onClick","handleDecrease","count","handleIncrease","audio","document","getElementById","App","props","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","handlePlayPause","clearInterval","loop","setState","setInterval","play","handleReset","pause","currentTime","convertToTime","minutes","Math","floor","seconds","handleBreakDecrease","handleSessionDecrease","handleBreakIncrease","handleSessionIncrease","undefined","this","breakProps","sessionProps","React","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.12356712.chunk.js","sourcesContent":["import React from  'react';\r\nimport './App.css';\r\n\r\n//creating the first function for setting the time for clock\r\n//This component will help to display the time whatever \r\n//is running at that moment by using the argument to set the specific time\r\n\r\nfunction SetTimer(arg) {\r\n\r\n    const id = arg.title.toLowerCase()\r\n    return(\r\n        <div className=\"timer-container\">\r\n            {/*created a class for timer-container\r\n                in this we will create a wrapper which shall have\r\n                a button to increment or decerement the time and we\r\n                can use this component to create session length and\r\n                break length\r\n            */}\r\n            \r\n            <div className=\"flex actions-wrapper\">\r\n                <button id={`${id}-decrement`} onClick={arg.handleDecrease} ><i className=\"fa fa-minus\" /></button>\r\n                <span id={`${id}-length`} >{arg.count}</span>\r\n                <button id={`${id}-increment`} onClick={arg.handleIncrease} ><i className=\"fa fa-plus\" /></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst audio = document.getElementById('beep')\r\n//We have provided an audio file in index.html file with an id beep and\r\n//are fetching that audio through this audio constant\r\n\r\nclass App extends React.Component {\r\n//here we start our default component that is <App  />\r\n\r\n    state={\r\n        breakCount: 5,  //count for break interval in minutes\r\n        sessionCount: 25, //count for session intervals in minutes\r\n        clockCount: 25*60, //total count for the clock's session 60min\r\n        currentTimer: 'Session', //title of the clock Session\r\n        isPlaying: false, //status of clock initially false\r\n    }\r\n\r\n    constructor(props) { \r\n        super(props)\r\n        this.loop = undefined\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        clearInterval(this.loop)\r\n    }   \r\n    \r\n    handlePlayPause = () => { //function to handle play/pause button\r\n        const {isPlaying} = this.state //current status \r\n        if (isPlaying) { //if playing then change state to pause and vice versa\r\n          clearInterval(this.loop)\r\n          this.setState({\r\n            isPlaying: false\r\n        })\r\n        } else { //changing status if paused to play at current status\r\n          this.setState({\r\n            isPlaying: true\r\n        })\r\n   \r\n        this.loop = setInterval(() => {\r\n            const {clockCount, currentTimer, breakCount, sessionCount} = this.state\r\n            if (clockCount === 0) {\r\n               this.setState({\r\n                   currentTimer: (currentTimer === 'Session') ? 'Break' : 'Sesion' ,\r\n                   clockCount: (currentTimer === 'Session') ? (breakCount * 60) : (sessionCount * 60)\r\n            })\r\n            audio.play()\r\n            }else {this.setState ({clockCount: clockCount - 1})}\r\n   \r\n        }, 1000)\r\n        }   \r\n    }//end of handlePlayPause\r\n   \r\n    handleReset = () => {//handling reset button, we reset the set state function to it's initial value and clear interval\r\n        this.setState({\r\n            breakCount: 5,\r\n            sessionCount: 25,\r\n            clockCount: 25 * 60,\r\n            currentTimer: 'Session',\r\n            isPlaying: false,\r\n    })\r\n   \r\n        clearInterval(this.loop)\r\n   \r\n        audio.pause()\r\n        audio.currentTime = 0\r\n    }\r\n   \r\n    convertToTime = (count) => { \r\n        let  minutes = Math.floor(count / 60)\r\n        let seconds = count % 60\r\n        seconds = seconds < 10 ? ('0' + seconds) : seconds\r\n        minutes = minutes < 10 ? ('0' + minutes) : minutes\r\n        return `${minutes}:${seconds}`\r\n    }\r\n\r\n    handleBreakDecrease = () => { // decerement break time\r\n        const {breakCount, isPlaying, currentTimer} = this.state\r\n        if (breakCount > 1) {\r\n            if (!isPlaying && currentTimer === 'Break') {\r\n            this.setState({\r\n                breakCount: breakCount - 1,\r\n                clockCount: (breakCount - 1) * 60\r\n            })\r\n            } else {\r\n            this.setState({\r\n                breakCount: breakCount - 1\r\n            })\r\n            }\r\n        } \r\n    }\r\n   \r\n    handleSessionDecrease = () => {//decrement session time\r\n        const {sessionCount, isPlaying, currentTimer} = this.state\r\n\r\n        if(sessionCount > 1) {\r\n            if (!isPlaying && currentTimer === 'Session') {\r\n                this.setState({\r\n                    sessionCount: sessionCount - 1,\r\n                    clockCount: (sessionCount - 1) * 60\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    sessionCount: sessionCount - 1\r\n                })\r\n            }\r\n        } \r\n    }\r\n    handleBreakIncrease = () => { //increment break time\r\n        const {breakCount, isPlaying, currentTimer} = this.state\r\n\r\n        if (breakCount < 60) {\r\n            if (!isPlaying && currentTimer === 'Break') {\r\n            this.setState({\r\n                breakCount: breakCount + 1,\r\n                clockCount: (breakCount + 1) * 60\r\n            })\r\n            } else {\r\n            this.setState({\r\n                breakCount: breakCount + 1\r\n            })\r\n            }\r\n        }\r\n    }\r\n      \r\n   \r\n    handleSessionIncrease = () => { //increment session time\r\n        const {sessionCount, isPlaying, currentTimer} = this.state\r\n\r\n        if (sessionCount < 60) {\r\n            if (!isPlaying && currentTimer === 'Session') {\r\n                this.setState({\r\n                sessionCount: sessionCount + 1,\r\n                clockCount: (sessionCount + 1) * 60\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    sessionCount: sessionCount + 1\r\n                })\r\n            }\r\n        }\r\n    }\r\n   \r\n     \r\n   \r\n    render () {\r\n\r\n        const {\r\n            breakCount,\r\n            sessionCount,\r\n            clockCount,\r\n            currentTimer,\r\n            isPlaying\r\n        } = this.state\r\n        \r\n        const breakProps = {\r\n            title: 'Break',\r\n            count: breakCount,\r\n            handleDecrease: this.handleBreakDecrease,\r\n            handleIncrease: this.handleBreakIncrease\r\n        }\r\n   \r\n        const sessionProps = {\r\n            title: 'Session',\r\n            count: sessionCount,\r\n            handleDecrease: this.handleSessionDecrease,\r\n            handleIncrease: this.handleSessionIncrease\r\n        }\r\n   \r\n        return (\r\n            <header className=\"App-header\">\r\n                <div className=\"body\">   \r\n                <h1>Work And Break</h1> <br/>     \r\n                    <div className=\"flex\">\r\n                    <SetTimer {...breakProps} />\r\n                    <SetTimer {...sessionProps} />\r\n                    </div>\r\n                    <div className=\"clock-container\">\r\n                        <h1 id=\"timer-label\" > {currentTimer} </h1>\r\n                        <span id=\"time-left\" >{this.convertToTime(clockCount)}</span>\r\n                        <div className=\"flex\">\r\n                            <button id=\"start_stop\" onClick={this.handlePlayPause} ><i className={`fa fa-${isPlaying ? 'pause' : 'play'}`}/></button>\r\n                            <button id=\"reset\" onClick={this.handleReset} ><i className=\"fa fa-refresh\" /></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n       \r\n}\r\n   \r\nexport default App;\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n            <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n\r\n\r\n"],"sourceRoot":""}